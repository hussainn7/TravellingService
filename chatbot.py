from datetime import datetime, timedelta
import logging
from enum import Enum, auto
import json

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class ConversationState(Enum):
    INIT = auto()
    ASK_DEPARTURE = auto()
    ASK_COUNTRY = auto()
    ASK_TRIP_LENGTH = auto()
    ASK_ADULTS = auto()
    ASK_CHILDREN = auto()
    CONFIRM = auto()
    SEARCHING = auto()
    DONE = auto()

class TourChatbot:
    def __init__(self):
        self.state = ConversationState.INIT
        self.user_data = {}
        self.departure_cities = {
            "1": "–ú–æ—Å–∫–≤–∞",
            "2": "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥",
            "3": "–ö–∞–∑–∞–Ω—å"
        }
        self.countries = {
            "1": "–ï–≥–∏–ø–µ—Ç",
            "2": "–¢—É—Ä—Ü–∏—è",
            "3": "–û–ê–≠",
            "4": "–¢–∞–∏–ª–∞–Ω–¥"
        }
        self.trip_lengths = {
            "1": "–ö–æ—Ä–æ—Ç–∫–∞—è (5-7 –Ω–æ—á–µ–π)",
            "2": "–°—Ä–µ–¥–Ω—è—è (7-10 –Ω–æ—á–µ–π)",
            "3": "–î–ª–∏–Ω–Ω–∞—è (10-14 –Ω–æ—á–µ–π)",
            "4": "–û—á–µ–Ω—å –¥–ª–∏–Ω–Ω–∞—è (14-21 –Ω–æ—á—å)"
        }
        self.trip_length_mapping = {
            "1": (5, 7),
            "2": (7, 10),
            "3": (10, 14),
            "4": (14, 21)
        }

    def get_next_message(self, user_input=None):
        """Process user input and return next message"""
        if self.state == ConversationState.INIT:
            self.state = ConversationState.ASK_DEPARTURE
            return self._format_departure_question()

        if user_input is None:
            return self._get_current_question()

        try:
            if self.state == ConversationState.ASK_DEPARTURE:
                return self._handle_departure(user_input)
            elif self.state == ConversationState.ASK_COUNTRY:
                return self._handle_country(user_input)
            elif self.state == ConversationState.ASK_TRIP_LENGTH:
                return self._handle_trip_length(user_input)
            elif self.state == ConversationState.ASK_ADULTS:
                return self._handle_adults(user_input)
            elif self.state == ConversationState.ASK_CHILDREN:
                return self._handle_children(user_input)
            elif self.state == ConversationState.CONFIRM:
                return self._handle_confirmation(user_input)
        except ValueError as e:
            return str(e)

        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω—è–ª –≤–∞—à –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."

    def _format_departure_question(self):
        options = "\n".join([f"{k}: {v}" for k, v in self.departure_cities.items()])
        return f"üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –≤–∞–º –Ω–∞–π—Ç–∏ –∏–¥–µ–∞–ª—å–Ω—ã–π —Ç—É—Ä.\n\n–û—Ç–∫—É–¥–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–ª–µ—Ç–µ—Ç—å?\n{options}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≥–æ—Ä–æ–¥–∞:"

    def _handle_departure(self, user_input):
        if user_input not in self.departure_cities:
            return f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–∑ —Å–ø–∏—Å–∫–∞:\n{self._format_departure_question()}"
        
        self.user_data['departure'] = user_input
        self.state = ConversationState.ASK_COUNTRY
        
        options = "\n".join([f"{k}: {v}" for k, v in self.countries.items()])
        return f"üåç –í –∫–∞–∫—É—é —Å—Ç—Ä–∞–Ω—É —Ö–æ—Ç–∏—Ç–µ –ø–æ–µ—Ö–∞—Ç—å?\n{options}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω—ã:"

    def _handle_country(self, user_input):
        if user_input not in self.countries:
            options = "\n".join([f"{k}: {v}" for k, v in self.countries.items()])
            return f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –∏–∑ —Å–ø–∏—Å–∫–∞:\n{options}"
        
        self.user_data['country'] = user_input
        self.state = ConversationState.ASK_TRIP_LENGTH

        # Set default dates (next week for 2 weeks)
        start_date = datetime.now() + timedelta(days=7)
        end_date = start_date + timedelta(days=14)
        self.user_data['date_from'] = start_date.strftime('%Y-%m-%d')
        self.user_data['date_to'] = end_date.strftime('%Y-%m-%d')
        
        options = "\n".join([f"{k}: {v}" for k, v in self.trip_lengths.items()])
        return f"‚åõ –ö–∞–∫–æ–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ç—É—Ä –≤—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ?\n{options}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—Ä–∏–∞–Ω—Ç–∞:"

    def _handle_trip_length(self, user_input):
        if user_input not in self.trip_lengths:
            options = "\n".join([f"{k}: {v}" for k, v in self.trip_lengths.items()])
            return f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞:\n{options}"
        
        nights_from, nights_to = self.trip_length_mapping[user_input]
        self.user_data['nights_from'] = nights_from
        self.user_data['nights_to'] = nights_to
        self.state = ConversationState.ASK_ADULTS
        
        return "üë• –°–∫–æ–ª—å–∫–æ –≤–∑—Ä–æ—Å–ª—ã—Ö –ø–æ–µ–¥–µ—Ç? (–≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 6):"

    def _handle_adults(self, user_input):
        try:
            adults = int(user_input)
            if adults < 1 or adults > 6:
                return "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∑—Ä–æ—Å–ª—ã—Ö –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 6. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
            
            self.user_data['adults'] = adults
            self.state = ConversationState.ASK_CHILDREN
            
            return "üë∂ –°–∫–æ–ª—å–∫–æ –¥–µ—Ç–µ–π –ø–æ–µ–¥–µ—Ç? (–≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 4):"
        except ValueError:
            return "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 6:"

    def _handle_children(self, user_input):
        try:
            children = int(user_input)
            if children < 0 or children > 4:
                return "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 0 –¥–æ 4. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
            
            self.user_data['children'] = children
            self.state = ConversationState.CONFIRM
            
            return self._format_confirmation_message()
        except ValueError:
            return "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 4:"

    def _format_confirmation_message(self):
        start_date = datetime.strptime(self.user_data['date_from'], '%Y-%m-%d')
        end_date = datetime.strptime(self.user_data['date_to'], '%Y-%m-%d')
        
        return (
            "üéâ –û—Ç–ª–∏—á–Ω–æ! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç—É—Ä–∞:\n\n"
            f"‚úàÔ∏è –í—ã–ª–µ—Ç –∏–∑: {self.departure_cities[self.user_data['departure']]}\n"
            f"üåç –°—Ç—Ä–∞–Ω–∞: {self.countries[self.user_data['country']]}\n"
            f"üìÖ –ü—Ä–∏–º–µ—Ä–Ω—ã–µ –¥–∞—Ç—ã: {start_date.strftime('%d.%m.%Y')} - {end_date.strftime('%d.%m.%Y')}\n"
            f"üåô –ù–æ—á–µ–π: {self.user_data['nights_from']}-{self.user_data['nights_to']}\n"
            f"üë• –í–∑—Ä–æ—Å–ª—ã—Ö: {self.user_data['adults']}\n"
            f"üë∂ –î–µ—Ç–µ–π: {self.user_data['children']}\n\n"
            "–ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ —Ç—É—Ä–æ–≤? (–¥–∞/–Ω–µ—Ç)"
        )

    def _handle_confirmation(self, user_input):
        if user_input.lower() in ['–¥–∞', 'yes', 'y', '+']:
            self.state = ConversationState.SEARCHING
            return "SEARCH_READY", self.user_data
        elif user_input.lower() in ['–Ω–µ—Ç', 'no', 'n', '-']:
            self.state = ConversationState.INIT
            self.user_data = {}
            return "–•–æ—Ä–æ—à–æ, –¥–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º —Å–Ω–∞—á–∞–ª–∞.\n" + self._format_departure_question()
        else:
            return "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ '–¥–∞' –∏–ª–∏ '–Ω–µ—Ç':"

    def _get_current_question(self):
        """Get the current question based on state"""
        if self.state == ConversationState.ASK_DEPARTURE:
            return self._format_departure_question()
        elif self.state == ConversationState.ASK_COUNTRY:
            options = "\n".join([f"{k}: {v}" for k, v in self.countries.items()])
            return f"üåç –í –∫–∞–∫—É—é —Å—Ç—Ä–∞–Ω—É —Ö–æ—Ç–∏—Ç–µ –ø–æ–µ—Ö–∞—Ç—å?\n{options}"
        elif self.state == ConversationState.ASK_TRIP_LENGTH:
            options = "\n".join([f"{k}: {v}" for k, v in self.trip_lengths.items()])
            return f"‚åõ –ö–∞–∫–æ–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ç—É—Ä –≤—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ?\n{options}"
        elif self.state == ConversationState.ASK_ADULTS:
            return "üë• –°–∫–æ–ª—å–∫–æ –≤–∑—Ä–æ—Å–ª—ã—Ö –ø–æ–µ–¥–µ—Ç? (–≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 6):"
        elif self.state == ConversationState.ASK_CHILDREN:
            return "üë∂ –°–∫–æ–ª—å–∫–æ –¥–µ—Ç–µ–π –ø–æ–µ–¥–µ—Ç? (–≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 4):"
        elif self.state == ConversationState.CONFIRM:
            return self._format_confirmation_message()
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º —Å–Ω–∞—á–∞–ª–∞."

    def reset(self):
        """Reset the conversation state"""
        self.state = ConversationState.INIT
        self.user_data = {} 